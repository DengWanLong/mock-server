{
    "version": 3,
    "sources": [
        "../../../src/api/controller/index.js"
    ],
    "names": [
        "Enum",
        "indexAction",
        "prefix",
        "url",
        "http",
        "replace",
        "temp",
        "split",
        "length",
        "fail",
        "URL_ERROR",
        "code",
        "msg",
        "projectPrefix",
        "interfaceUrl",
        "params",
        "indexOf",
        "model",
        "where",
        "find",
        "project",
        "think",
        "isEmpty",
        "NOT_PROJECT_URL_ERROR",
        "projectId",
        "id",
        "openExact",
        "interfaces",
        "NOT_INTERFACE_URL_ERROR",
        "openProxy",
        "proxyURL",
        "NOT_PROXY_URL_ERROR",
        "openMock",
        "success",
        "mock",
        "parse",
        "result",
        "source",
        "startsWith",
        "substring",
        "endsWith",
        "lastIndexOf",
        "includes",
        "reg",
        "word",
        "test",
        "data",
        "JSON"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/index.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from './base.js';\nimport  * as Enum from '../../enum.js';\nimport Mock from 'mockjs';\n\nexport default class extends Base {\n  /**\n   * index action\n   * @return {Promise} []\n   */\n  async indexAction(){\n    //auto render template file index_index.html\n    let prefix = '/api/';\n    let url = this.http.url.replace(prefix, '');\n    let temp = url.split(\"/\");\n    //检查接口地址是否符合\n    if(temp.length != 2 || !temp[0] || !temp[1]) {\n      return this.fail(Enum.URL_ERROR.code, Enum.URL_ERROR.msg);\n    }\n    let projectPrefix = temp[0];\n    let interfaceUrl = temp[1];\n    let params = '';\n    //处理params参数\n    if(interfaceUrl.indexOf(\"?\")) {\n      params = interfaceUrl.split(\"?\")[1];\n    }\n    // return this.success({projectPrefix: projectPrefix, interfaceUrl: interfaceUrl, params: params});\n    //查询对应项目是否存在\n    let project = await this.model(\"project\").where({projectPrefix: projectPrefix}).find();\n    if(think.isEmpty(project)) {\n      return this.fail(Enum.NOT_PROJECT_URL_ERROR.code, Enum.NOT_PROJECT_URL_ERROR.msg);\n    }\n    //查询当前项目下对应接口是否存在(精确匹配)\n    let interfaces = await this.model(\"interface\").where({projectId: project.id, url: interfaceUrl, openExact: 1}).find();\n    if(think.isEmpty(interfaces)) {\n      //查询当前项目下对应接口是否存在(模糊匹配)\n      interfaceUrl = interfaceUrl.replace(\"?\" + params, '');\n      interfaces = await this.model(\"interface\").where({projectId: project.id, url: interfaceUrl, openExact: 0}).find();\n      if(think.isEmpty(interfaces)) {\n        return this.fail(Enum.NOT_INTERFACE_URL_ERROR.code, Enum.NOT_INTERFACE_URL_ERROR.msg);\n      }\n    }\n    //判断请求方式是否匹配\n    // if(!this.isAjax() || !this.isAjax(interfaces.requestType)) {\n    //   return this.fail(Enum.NOT_INTERFACE_URL_ERROR.code, Enum.NOT_INTERFACE_URL_ERROR.msg);\n    // }\n    //判断是否打开二次代理\n    if(interfaces.openProxy == 1) {\n      if(!interfaces.proxyURL) {\n        return this.fail(Enum.NOT_PROXY_URL_ERROR.code, Enum.NOT_PROXY_URL_ERROR.msg);\n      }\n    } else {\n      //判断是否开启Mockjs\n      if(interfaces.openMock == 1) {\n        return this.success(Mock.mock(this.parse(interfaces.result)));\n      } else {\n        return this.success(this.parse(interfaces.result));\n      }\n    }\n    return this.success();\n  }\n\n  parse(source) {\n    if(!source.startsWith('{')) {\n      source = source.substring(source.indexOf(\"{\"), source.length);\n    }\n    if(!source.endsWith('}')) {\n      source = source.substring(0, source.lastIndexOf(\"}\") + 1);\n    }\n    if(source.includes('//') || source.includes('/*')) {\n      var reg = /(\"([^\\\\\\\"]*(\\\\.)?)*\")|('([^\\\\\\']*(\\\\.)?)*')|(\\/{2,}.*?(\\r|\\n))|(\\/\\*(\\n|.)*?\\*\\/)/g,// 正则表达式\n      source = source.replace(reg, function(word) { // 去除注释后的文本\n          return /^\\/{2,}/.test(word) || /^\\/\\*/.test(word) ? \"\" : word;\n      });\n    }\n    var data = Mock.mock(JSON.parse(source));\n    return data;\n  }\n}\n"
    ]
}