{
    "version": 3,
    "sources": [
        "../../../src/api/controller/index.js"
    ],
    "names": [
        "Enum",
        "Common",
        "indexAction",
        "prefix",
        "url",
        "http",
        "replace",
        "indexOf",
        "temp",
        "split",
        "length",
        "fail",
        "URL_ERROR",
        "code",
        "msg",
        "projectPrefix",
        "interfaceUrl",
        "params",
        "model",
        "where",
        "find",
        "project",
        "think",
        "isEmpty",
        "NOT_PROJECT_URL_ERROR",
        "interfaces",
        "projectId",
        "id",
        "openExact",
        "select",
        "interfaceList",
        "inParams",
        "get",
        "isPost",
        "post",
        "i",
        "parse",
        "isContainEqual",
        "NOT_INTERFACE_URL_ERROR",
        "openProxy",
        "proxyURL",
        "NOT_PROXY_URL_ERROR",
        "openMock",
        "json",
        "mock",
        "result",
        "success"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/index.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from './base.js';\nimport  * as Enum from '../../enum.js';\nimport  * as Common from '../../common.js';\nimport Mock from 'mockjs';\n\nexport default class extends Base {\n  /**\n   * index action\n   * @return {Promise} []\n   */\n  async indexAction(){\n    //auto render template file index_index.html\n    let prefix = '/api/';\n    let url = this.http.url.replace(prefix, '');\n    if(url.indexOf(\"/\") == 0) {\n      url = url.replace(\"/\", '');\n    }\n    let temp = url.split(\"/\");\n    //检查接口地址是否符合\n    if(temp.length < 2 || !temp[0] || !temp[1]) {\n      return this.fail(Enum.URL_ERROR.code, Enum.URL_ERROR.msg);\n    }\n    let projectPrefix = temp[0];\n    let interfaceUrl = url.replace(projectPrefix + '/', '');\n    let params = '';\n    //处理params参数\n    if(interfaceUrl.indexOf(\"?\")) {\n      params = interfaceUrl.split(\"?\")[1];\n    }\n    // return this.success({projectPrefix: projectPrefix, interfaceUrl: interfaceUrl, params: params});\n    //查询对应项目是否存在\n    let project = await this.model(\"project\").where({projectPrefix: projectPrefix}).find();\n    if(think.isEmpty(project)) {\n      return this.fail(Enum.NOT_PROJECT_URL_ERROR.code, Enum.NOT_PROJECT_URL_ERROR.msg);\n    }\n    //查询当前项目下对应接口是否存在(精确匹配)\n    let interfaces = null;\n    //有入参才能进行精确匹配\n    if(params) {\n      interfaceUrl = interfaceUrl.replace(\"?\" + params, '');\n      let interfaceList = await this.model(\"interface\").where({projectId: project.id, url: interfaceUrl, openExact: 1}).select();\n      //获取入参\n      let inParams = this.get();\n      delete inParams[projectPrefix];\n      if(this.isPost()) {\n        inParams = this.post();\n      }\n      //循环对比\n      for(let i = 0; i < interfaceList.length; i++) {\n        interfaces = interfaceList[i];\n        let params = Common.parse(interfaces.params);\n        if(Common.isContainEqual(params, inParams)) {\n          break;\n        }\n        interfaces = null;\n      }\n    }\n    if(think.isEmpty(interfaces)) {\n      //查询当前项目下对应接口是否存在(模糊匹配)\n      interfaceUrl = interfaceUrl.replace(\"?\" + params, '');\n      interfaces = await this.model(\"interface\").where({projectId: project.id, url: interfaceUrl, openExact: 0}).find();\n      if(think.isEmpty(interfaces)) {\n        return this.fail(Enum.NOT_INTERFACE_URL_ERROR.code, Enum.NOT_INTERFACE_URL_ERROR.msg);\n      }\n    }\n    //判断请求方式是否匹配\n    // if(!this.isAjax() || !this.isAjax(interfaces.requestType)) {\n    //   return this.fail(Enum.NOT_INTERFACE_URL_ERROR.code, Enum.NOT_INTERFACE_URL_ERROR.msg);\n    // }\n    //判断是否打开二次代理\n    if(interfaces.openProxy == 1) {\n      if(!interfaces.proxyURL) {\n        return this.fail(Enum.NOT_PROXY_URL_ERROR.code, Enum.NOT_PROXY_URL_ERROR.msg);\n      }\n    } else {\n      //判断是否开启Mockjs\n      if(interfaces.openMock == 1) {\n        return this.json(Mock.mock(Common.parse(interfaces.result)));\n      } else {\n        return this.json(Common.parse(interfaces.result));\n      }\n    }\n    return this.success();\n  }\n}\n"
    ]
}