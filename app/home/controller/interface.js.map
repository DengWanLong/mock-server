{
    "version": 3,
    "sources": [
        "../../../src/home/controller/interface.js"
    ],
    "names": [
        "Enum",
        "Common",
        "queryAction",
        "pageNo",
        "get",
        "pageSize",
        "projectId",
        "queryText",
        "session",
        "userInfo",
        "think",
        "isEmpty",
        "fail",
        "NOT_NOGIN",
        "code",
        "msg",
        "where",
        "id",
        "_complex",
        "_logic",
        "model",
        "alias",
        "join",
        "page",
        "field",
        "countSelect",
        "result",
        "success",
        "pages",
        "totalCount",
        "totalPage",
        "tables",
        "count",
        "totalPages",
        "data",
        "addAction",
        "allParams",
        "post",
        "interfaceName",
        "find",
        "interfaces",
        "ADD_INTERFACE_NAME_ERROR",
        "params",
        "parse",
        "url",
        "select",
        "interfaceList",
        "i",
        "length",
        "oldParams",
        "openExact",
        "isContainEqual",
        "ADD_INTERFACE_URL_OR_PARAMS_ERROR",
        "add",
        "editAction",
        "update",
        "deleteAction",
        "delete"
    ],
    "mappings": "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",
    "file": "../../../src/home/controller/interface.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from './base.js';\nimport  * as Enum from '../../enum.js';\nimport  * as Common from '../../common.js';\n\nexport default class extends Base {\n  /**\n   * index action\n   * @return {Promise} []\n   */\n  async queryAction(){\n    let pageNo = this.get(\"pageNo\");\n    let pageSize = this.get(\"pageSize\");\n    let projectId = this.get(\"projectId\");\n    let queryText = this.get(\"queryText\");\n    let userInfo = await this.session(\"userInfo\");\n    if(think.isEmpty(userInfo)) {\n      return this.fail(Enum.NOT_NOGIN.code, Enum.NOT_NOGIN.msg);\n    }\n    let where = {\"ua.userId\": userInfo.id};\n    if(!think.isEmpty(projectId)) {\n      where[\"p.id\"] = projectId;\n    }\n    if(!think.isEmpty(queryText)) {\n      // where[\"i.interfaceName\"] = [\"like\", \"%\" + queryText + \"%\"];\n      where._complex = {\n        \"i.interfaceName\": [\"like\", \"%\" + queryText + \"%\"],\n        \"i.url\": [\"like\", \"%\" + queryText + \"%\"],\n        _logic: \"or\"\n      };\n    }\n    var result = await this.model(\"interface\").alias('i').join([\n      'INNER JOIN project as p ON i.projectId=p.id',\n      'INNER JOIN userAuth as ua on p.id=ua.projectId'\n    ]).page(pageNo, pageSize).where(where)\n    .field(\"i.id,i.projectId,i.interfaceName,i.url,i.proxyUrl,i.requestType,i.openExact,i.params,i.result,i.code,i.openMock,i.openProxy,date_format(i.createTime, '%Y-%c-%d %h:%i:%s' ) as createTime,p.projectName,p.projectPrefix\")\n    .countSelect();\n    if(think.isEmpty(result)) {\n      return this.success({pages: {pageNo: pageNo, pageSize: pageSize, totalCount: 0, totalPage: 0}, tables: []});\n    }\n    return this.success({pages: {pageNo: pageNo, pageSize: pageSize, totalCount: result.count, totalPage: result.totalPages}, tables: result.data});\n  }\n\n  async addAction() {\n    //获取所有入参\n    let allParams = this.post();\n    //判断用户是否登录\n    let userInfo = await this.session(\"userInfo\");\n    if(think.isEmpty(userInfo)) {\n      return this.fail(Enum.NOT_NOGIN.code, Enum.NOT_NOGIN.msg);\n    }\n\n    let model = this.model(\"interface\");\n    let interfaces = await model.where({projectId: allParams.projectId, interfaceName: allParams.interfaceName}).find();\n    if(!think.isEmpty(interfaces) && !think.isEmpty(interfaces.id)) {\n      return this.fail(Enum.ADD_INTERFACE_NAME_ERROR.code, Enum.ADD_INTERFACE_NAME_ERROR.msg);\n    }\n    let params = Common.parse(allParams.params);\n    let interfaceList = await model.where({projectId: allParams.projectId, url: allParams.url}).select();\n    for(let i = 0; i < interfaceList.length; i++) {\n      interfaces = interfaceList[i];\n      let oldParams = Common.parse(interfaces.params);\n      //模糊匹配url不能相同，精确匹配参数不能相同，模糊匹配的地址与精确匹配的地址不能相同\n      if(allParams.openExact == 0 || interfaces.openExact == 0 || Common.isContainEqual(params, oldParams) || Common.isContainEqual(oldParams, params)) {\n        return this.fail(Enum.ADD_INTERFACE_URL_OR_PARAMS_ERROR.code, Enum.ADD_INTERFACE_URL_OR_PARAMS_ERROR.msg);\n      }\n    }\n\n\n    await this.model(\"interface\").add(allParams);\n    return this.success();\n  }\n\n  async editAction() {\n    //获取所有入参\n    let allParams = this.post();\n    //判断用户是否登录\n    let userInfo = await this.session(\"userInfo\");\n    if(think.isEmpty(userInfo)) {\n      return this.fail(Enum.NOT_NOGIN.code, Enum.NOT_NOGIN.msg);\n    }\n    var id = allParams.id;\n    delete allParams.id;\n    let model = this.model(\"interface\");\n    let interfaces = await model.where({projectId: allParams.projectId, id: ['!=', id], interfaceName: allParams.interfaceName}).find();\n    if(!think.isEmpty(interfaces) && !think.isEmpty(interfaces.id)) {\n      return this.fail(Enum.ADD_INTERFACE_NAME_ERROR.code, Enum.ADD_INTERFACE_NAME_ERROR.msg);\n    }\n    let params = Common.parse(allParams.params);\n    let interfaceList = await model.where({projectId: allParams.projectId, id: ['!=', id], url: allParams.url}).select();\n    for(let i = 0; i < interfaceList.length; i++) {\n      interfaces = interfaceList[i];\n      let oldParams = Common.parse(interfaces.params);\n      //模糊匹配url不能相同，精确匹配参数不能相同，模糊匹配的地址与精确匹配的地址不能相同\n      if(allParams.openExact == 0 || interfaces.openExact == 0 || Common.isContainEqual(params, oldParams) || Common.isContainEqual(oldParams, params)) {\n        return this.fail(Enum.ADD_INTERFACE_URL_OR_PARAMS_ERROR.code, Enum.ADD_INTERFACE_URL_OR_PARAMS_ERROR.msg);\n      }\n    }\n\n    await this.model(\"interface\").where({id: id}).update(allParams);\n    return this.success();\n  }\n\n  async deleteAction() {\n    let id = this.get(\"id\");\n    let userInfo = await this.session(\"userInfo\");\n    if(think.isEmpty(userInfo)) {\n      return this.fail(Enum.NOT_NOGIN.code, Enum.NOT_NOGIN.msg);\n    }\n    await this.model(\"interface\").where({id: id}).delete();\n    return this.success();\n  }\n}\n"
    ]
}