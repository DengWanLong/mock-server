{
    "version": 3,
    "sources": [
        "../../../src/common/controller/error.js"
    ],
    "names": [
        "displayError",
        "status",
        "controllerInstance",
        "controller",
        "action",
        "data",
        "think",
        "env",
        "http",
        "error",
        "errorConfig",
        "config",
        "message",
        "isJsonp",
        "jsonp",
        "key",
        "msg",
        "isAjax",
        "fail",
        "module",
        "mode",
        "mode_module",
        "file",
        "options",
        "extend",
        "type",
        "file_depr",
        "fetch",
        "then",
        "content",
        "replace",
        "content_type",
        "end",
        "_400Action",
        "_403Action",
        "_404Action",
        "_500Action",
        "_503Action",
        "base"
    ],
    "mappings": "AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIE;;;;;mBAKMA,Y;2FAAaC,M;;;;;;;;;AACbC,gC,GAAqB,KAAKC,UAAL,CAAgB,WAAhB,C;;qBACR,KAAKC,MAAL,CAAYF,kBAAZ,EAAgC,OAAhC,C;;;AAAbG,kB;;;AAEJ;AACA,kBAAGC,MAAMC,GAAN,KAAc,YAAjB,EAA8B;AAC5B,qBAAKC,IAAL,CAAUC,KAAV,GAAkB,IAAlB;AACD;;AAEGC,yB,GAAc,KAAKC,MAAL,CAAY,OAAZ,C;AACdC,qB,GAAU,KAAKJ,IAAL,CAAUC,KAAV,IAAmB,KAAKD,IAAL,CAAUC,KAAV,CAAgBG,OAAnC,IAA8C,E;;mBACzD,KAAKC,OAAL,E;;;;;+CACM,KAAKC,KAAL,sBACJJ,YAAYK,GADR,IACcd,MADd,SAEJS,YAAYM,GAFR,IAEcJ,OAFd,U;;;mBAIA,KAAKK,MAAL,E;;;;;+CACA,KAAKC,IAAL,CAAUjB,MAAV,EAAkBW,OAAlB,C;;;AAGLO,oB,GAAS,Q;;AACb,kBAAGb,MAAMc,IAAN,KAAed,MAAMe,WAAxB,EAAoC;AAClCF,yBAAS,KAAKR,MAAL,CAAY,gBAAZ,CAAT;AACD;AACGW,kB,GAAUH,M,eAAgBlB,M;AAC1BsB,qB,GAAU,KAAKZ,MAAL,CAAY,KAAZ,C;;AACdY,wBAAUjB,MAAMkB,MAAN,CAAa,EAAb,EAAiBD,OAAjB,EAA0B,EAACE,MAAM,MAAP,EAAeC,WAAW,GAA1B,EAA1B,CAAV;;AAEA;AACA;AACA;AACA;;AAEA,mBAAKC,KAAL,CAAWL,IAAX,EAAiB,EAAjB,EAAqBC,OAArB,EAA8BK,IAA9B,CAAmC,mBAAW;AAC5CC,0BAAUA,QAAQC,OAAR,CAAgB,eAAhB,EAAiClB,OAAjC,CAAV;AACA,uBAAKa,IAAL,CAAUF,QAAQQ,YAAlB;AACA,uBAAKC,GAAL,CAASH,OAAT;AACD,eAJD;;;;;;;;;;;;;;;;AAMF;;;;;;mBAIMI,U;;;;;;gDACG,KAAKjC,YAAL,CAAkB,GAAlB,C;;;;;;;;;;;;;;;;AAET;;;;;;mBAIMkC,U;;;;;;gDACG,KAAKlC,YAAL,CAAkB,GAAlB,C;;;;;;;;;;;;;;;;AAET;;;;;;mBAIMmC,U;;;;;;gDACG,KAAKnC,YAAL,CAAkB,GAAlB,C;;;;;;;;;;;;;;;;AAET;;;;;;mBAIMoC,U;;;;;;gDACG,KAAKpC,YAAL,CAAkB,GAAlB,C;;;;;;;;;;;;;;;;AAET;;;;;;mBAIMqC,U;;;;;;gDACG,KAAKrC,YAAL,CAAkB,GAAlB,C;;;;;;;;;;;;;;;;;;EA9EkBM,MAAMH,UAAN,CAAiBmC,I",
    "file": "../../../src/common/controller/error.js",
    "sourcesContent": [
        "'use strict';\n/**\n * error controller\n */\nexport default class extends think.controller.base {\n  /**\n   * display error page\n   * @param  {Number} status []\n   * @return {Promise}        []\n   */\n  async displayError(status){\n    let controllerInstance = this.controller('api/index');\n    let data = await this.action(controllerInstance, 'index');\n\n    //hide error message on production env\n    if(think.env === 'production'){\n      this.http.error = null;\n    }\n\n    let errorConfig = this.config('error');\n    let message = this.http.error && this.http.error.message || '';\n    if(this.isJsonp()){\n      return this.jsonp({\n        [errorConfig.key]: status,\n        [errorConfig.msg]: message\n      })\n    }else if(this.isAjax()){\n      return this.fail(status, message);\n    }\n\n    let module = 'common';\n    if(think.mode !== think.mode_module){\n      module = this.config('default_module');\n    }\n    let file = `${module}/error/${status}.html`;\n    let options = this.config('tpl');\n    options = think.extend({}, options, {type: 'base', file_depr: '_'});\n\n    // let prefix = '/api';\n    // let url = prefix + this.http.url;\n    // this.forward(url);\n    // this.redirect(url);\n\n    this.fetch(file, {}, options).then(content => {\n      content = content.replace('ERROR_MESSAGE', message);\n      this.type(options.content_type);\n      this.end(content);\n    });\n  }\n  /**\n   * Bad Request\n   * @return {Promise} []\n   */\n  async _400Action(){\n    return this.displayError(400);\n  }\n  /**\n   * Forbidden\n   * @return {Promise} []\n   */\n  async _403Action(){\n    return this.displayError(403);\n  }\n  /**\n   * Not Found\n   * @return {Promise}      []\n   */\n  async _404Action(){\n    return this.displayError(404);\n  }\n  /**\n   * Internal Server Error\n   * @return {Promise}      []\n   */\n  async _500Action(){\n    return this.displayError(500);\n  }\n  /**\n   * Service Unavailable\n   * @return {Promise}      []\n   */\n  async _503Action(){\n    return this.displayError(503);\n  }\n}\n"
    ]
}